//the following code was generated by Android Studio
package com.edward_costache.stay_fitrpg.exercises;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Color;
import android.hardware.Sensor;
import android.os.Build;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Vibrator;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.edward_costache.stay_fitrpg.R;
import com.edward_costache.stay_fitrpg.User;
import com.edward_costache.stay_fitrpg.util.Accelerometer;
import com.edward_costache.stay_fitrpg.util.SoundLibrary;
import com.edward_costache.stay_fitrpg.util.Util;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
//the code above was generated by Android Studio

/**
 * Created by Edward Costache
 */
public class SitupExerciseActivity extends AppCompatActivity {

    private LinearLayout layoutRound, layoutBreak;
    private TextView txtTitle;
    private boolean isRound = true;

    private DatabaseReference reference, weekRef;
    private String userID;
    private androidx.constraintlayout.widget.ConstraintLayout mainLayout;
    private User userProfile;

    private final double STARTING_VALUE = -6.7;
    private final double DISTANCE = 5.5;

    // Round
    private TextView txtSitupCount;
    private ArrayList<Integer> rounds;
    private int round = 0;
    private int maxRounds, goal, currentSitups, userStamina, userHealth, overallSitups;
    private boolean ready = true;
    private Vibrator vibrator;
    private Accelerometer accelerometer;

    // Break
    private CountDownTimer breakTimer;
    private long startMilliseconds;
    private TextView txtRound1, txtRound2, txtRound3, txtRound4, txtRound5, txtRound6, txtTime;
    private final int BREAK_TIME = 60;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_situp_exercise);

        rounds = getIntent().getIntegerArrayListExtra("rounds");        //get the number of rounds from SitupMenuActivity
        maxRounds = rounds.size();
        startMilliseconds = System.currentTimeMillis();
        initViews();
        setUpListeners();
        layoutRound.setVisibility(View.VISIBLE);
        layoutBreak.setVisibility(View.GONE);

        goal = rounds.get(round);
        updateTextView();
        txtTitle.setText(String.format("ROUND: %d", round + 1));

        if (maxRounds == 4) {
            txtRound4.setVisibility(View.VISIBLE);
        } else if (maxRounds == 5) {
            txtRound4.setVisibility(View.VISIBLE);
            txtRound5.setVisibility(View.VISIBLE);
        } else if (maxRounds == 6) {
            txtRound4.setVisibility(View.VISIBLE);
            txtRound5.setVisibility(View.VISIBLE);
            txtRound6.setVisibility(View.VISIBLE);
        }
        setUpUser();
        getUserCurrentStats();

        breakTimer = new CountDownTimer(BREAK_TIME * 1000 + 100, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                int seconds = (int) (millisUntilFinished / 1000);
                txtTime.setText(String.format("%02d:%02d", seconds / 60, seconds % 60));
            }

            @Override
            public void onFinish() {
                switchLayout();
            }
        };
    }

    @Override
    protected void onPause() {
        super.onPause();
        accelerometer.un_registerListener();
        SoundLibrary.stopSound();
    }

    @Override
    protected void onResume() {
        super.onResume();
        accelerometer.registerListener();
    }

    @Override
    public void onBackPressed() {
        displayClosingAlertBox();

    }

    /**
     * A function for displaying an AlertDialog that warns the user they are about to exit and loose all their progress
     */
    private void displayClosingAlertBox() {
        int seconds = (int) ((System.currentTimeMillis() - startMilliseconds) / 1000);
        new AlertDialog.Builder(SitupExerciseActivity.this, R.style.MyDialogTheme)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setTitle("Exiting the Exercise")
                .setMessage(String.format("Quiting yields NO rewards\nTotal Time: %02dm and %02ds\nTotal situps: %d", seconds / 60, seconds % 60, overallSitups))
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        Log.i("ON STOP: ", "YES");
                        finish();
                    }
                })
                .setNegativeButton("No", null)
                .show();
    }

    /**
     * A function for initializing all Views in the Situp exercise Activity
     */
    private void initViews() {
        layoutRound = findViewById(R.id.situpExerciseRoundLayout);
        layoutBreak = findViewById(R.id.situpExerciseBreakLayout);
        mainLayout = findViewById(R.id.situpExerciseMainLayout);

        txtSitupCount = findViewById(R.id.situpExerciseTxtSitupCount);
        txtTitle = findViewById(R.id.situpExerciseTxtTitle);
        txtRound1 = findViewById(R.id.situpExerciseTxtRound1);
        txtRound2 = findViewById(R.id.situpExerciseTxtRound2);
        txtRound3 = findViewById(R.id.situpExerciseTxtRound3);
        txtRound4 = findViewById(R.id.situpExerciseTxtRound4);
        txtRound5 = findViewById(R.id.situpExerciseTxtRound5);
        txtRound6 = findViewById(R.id.situpExerciseTxtRound6);
        txtTime = findViewById(R.id.situpExerciseTxtTime);

        vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
    }

    /**
     * A function for setting up the listener for the Accelerometer
     */
    private void setUpListeners()
    {
        accelerometer = new Accelerometer(SitupExerciseActivity.this, Sensor.TYPE_ACCELEROMETER);
        accelerometer.setListener(new Accelerometer.Listener() {
            @Override
            public void onTranslation(float tx, float ty, float tz) {
                /*
                As mentioned in the Accelerometer class, onTranslate is a method which is part of the listener Interface. Here we use the Interface as a medium to pass values from the
                actual sensorChanged() Overwritten method to a class where we want to use the Accelerometer.
                At first, the SitupExerciseActivity would implement a SensorEventListener, but this was impractical, so i created a seperate class called Accelerometer where all of the Accelerometer code
                would be stored, and to use it simply create the Accelerometer object.
                 */


                if (tz <= 1 && ready) {     //making sure we are ready for another situp
                    if ((tz - STARTING_VALUE) >= DISTANCE) {
                        SoundLibrary.playSound(SitupExerciseActivity.this, R.raw.ding);
                        currentSitups++;
                        overallSitups++;
                        ready = false;

                        if (currentSitups == goal) {        //break time
                            round++;
                            if (round == maxRounds) {       //end of exercise
                                vibrator.vibrate(500);
                                endOfExercise();
                            } else {
                                vibrator.vibrate(500);
                                goal = rounds.get(round);
                                currentSitups = 0;
                                switchLayout();
                            }
                        } else {
                            updateTextView();
                        }
                    }
                } else {
                    if (tz <= STARTING_VALUE) {
                        ready = true;
                    }
                }
            }
        });


//        txtSitupCount.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                SoundLibrary.playSound(SitupExerciseActivity.this, R.raw.ding);
//                currentSitups++;
//                overallSitups++;
//                ready = false;
//
//                if (currentSitups == goal) {        //break time
//                    round++;
//                    if (round == maxRounds) {       //end of exercise
//                        vibrator.vibrate(500);
//                        endOfExercise();
//                    } else {
//                        vibrator.vibrate(500);
//                        goal = rounds.get(round);
//                        currentSitups = 0;
//                        switchLayout();
//                    }
//                } else {
//                    updateTextView();
//                }
//            }
//        });
    }

    private void updateTextView() {
        txtSitupCount.setText(String.format("%02d / %02d", currentSitups, goal));
    }

    /**
     * A function for switching from round to break, and vice versa
     */
    @SuppressLint("ResourceAsColor")
    private void switchLayout() {
        if (isRound) {
            // Change to break
            ready = false;
            accelerometer.un_registerListener();
            layoutRound.setVisibility(View.GONE);
            layoutBreak.setVisibility(View.VISIBLE);

            txtTitle.setText("BREAK");

            txtRound1.setText(String.format("ROUND 1: %02d", rounds.get(0)));
            txtRound1.setTextColor(Color.GREEN);
            txtRound2.setText(String.format("ROUND 2: %02d", rounds.get(1)));
            if (round == 2) {
                txtRound2.setTextColor(Color.GREEN);
            }
            txtRound3.setText(String.format("ROUND 3: %02d", rounds.get(2)));
            if (round == 3) {
                txtRound3.setTextColor(Color.GREEN);
            }

            try {
                txtRound4.setText(String.format("ROUND 3: %02d", rounds.get(3)));
                if (round == 4) {
                    txtRound4.setTextColor(Color.GREEN);
                }
                txtRound5.setText(String.format("ROUND 3: %02d", rounds.get(4)));
                if (round == 5) {
                    txtRound5.setTextColor(Color.GREEN);
                }
                txtRound6.setText(String.format("ROUND 3: %02d", rounds.get(5)));

            } catch (Exception e) {
                Log.i("PUSHUP EXERCISE: ", "NOT ENOUGH ROUNDS");
            }
            breakTimer.start();
            isRound = false;
        } else {
            // Change to round
            ready = true;
            accelerometer.registerListener();

            layoutRound.setVisibility(View.VISIBLE);
            layoutBreak.setVisibility(View.GONE);

            txtTitle.setText(String.format("ROUND: %d", round + 1));
            updateTextView();
            breakTimer.cancel();
            isRound = true;
        }
    }

    /**
     * A function that fetches the user's attributes from the database only once
     */
    private void getUserCurrentStats() {
        reference.child(userID).addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                try {
                    userProfile = snapshot.getValue(User.class);
                    userStamina = userProfile.getStamina();
                    userHealth = userProfile.getHealth();
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.i("DISPLAY USER INFO: ", "USER IS NULL");
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
            }
        });
    }

    /**
     * A function that applies the rewards to the user's profile and displays the exercise information
     */
    private void endOfExercise() {
        reference.child(userID).child("stamina").setValue(userStamina + getIntent().getIntExtra("stamina", 0));
        reference.child(userID).child("health").setValue(userHealth + getIntent().getIntExtra("health", 0));

        weekRef = FirebaseDatabase.getInstance().getReference("users").child(FirebaseAuth.getInstance().getCurrentUser().getUid()).child("progress");
        //this chunk of code gets all the children of that week (days) and removes the number in front of it in order to find today's day, then adds the progress to that day.
        //NOTE: the reason i am looking for day names without the number in the front is because Util.getCurrentWeekOfYear() will return a day such as "Thu, 29-04"
        //however in the database it may be stored as "1Thu, 29-04" (this is done so that days are stored in order in the DB)
        //so essentially i am removing that "1" so that i can get only the day name, and if that name matches today store the value in that day (child)
        weekRef.child(Util.getCurrentWeekOfYear()).child("days").addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if (snapshot.getValue() != null)
                {
                    for(DataSnapshot daySnapshot : snapshot.getChildren())
                    {
                        String dayName = daySnapshot.getKey().substring(1);
                        if(dayName.equals(Util.getTodayAsStringFormat()))
                        {
                            weekRef.child(Util.getCurrentWeekOfYear()).child("days").child(daySnapshot.getKey()).child("situps").addListenerForSingleValueEvent(new ValueEventListener() {
                                @Override
                                public void onDataChange(@NonNull DataSnapshot snapshot) {
                                    if (snapshot.getValue() != null) {
                                        //changing the pushup value for the current day in the database
                                        weekRef.child(Util.getCurrentWeekOfYear()).child("days").child(daySnapshot.getKey()).child("situps").setValue(snapshot.getValue(Integer.class) + overallSitups);
                                    }
                                    else
                                    {
                                        Log.d("TAG", "onDataChange: PUSHUP PROGRESS NOT FOUND");
                                    }
                                }

                                @Override
                                public void onCancelled(@NonNull DatabaseError error) {

                                }
                            });
                        }
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        // currentTimeInMillis() returns the milliseconds for Epoch time, just like the Util.java class
        // Here i am subtracting the milliseconds at the start of the Activity from the milliseconds recorded at the end of the Activity
        // in order to get the amount of milliseconds the Activity has been running, then convert that to seconds
        int seconds = (int) ((System.currentTimeMillis() - startMilliseconds) / 1000);

        new AlertDialog.Builder(SitupExerciseActivity.this)
                .setTitle("Exercise Finished, Well Done!")
                .setMessage(String.format("Total Time: %02dm and %02ds\nTotal situps: %d\nStamina +%02d\t\tHealth +%02d", seconds / 60, seconds % 60, overallSitups, getIntent().getIntExtra("stamina", 0), getIntent().getIntExtra("health", 0)))
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        finish();
                    }
                })
                .setCancelable(false)
                .show();
    }

    /**
     * A function for assigning the userID to the userID variable
     */
    private void setUpUser() {
        reference = FirebaseDatabase.getInstance().getReference("users");
        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        if (user != null) {
            userID = user.getUid();
        } else {
            Snackbar.make(SitupExerciseActivity.this, mainLayout, "Something went wrong, logout and login again!", Snackbar.LENGTH_LONG).setAction("OK", new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                }
            }).show();
        }
    }
}